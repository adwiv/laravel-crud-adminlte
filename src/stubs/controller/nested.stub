<?php
/** @noinspection PhpMissingReturnTypeInspection */

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ namespacedParentModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ rootNamespace }}Http\Requests\{{ model }}Request;
use Exception;

class {{ class }} extends Controller
{
    public function index({{ parentModel }} ${{ parentModelVariable }})
    {
        ${{ pluralModelVariable }} = ${{ parentModelVariable }}->{{ pluralModelVariable }}()->paginate();
        return view('{{ viewprefix }}.index', compact('{{ pluralModelVariable }}'));
    }

    public function create({{ parentModel }} ${{ parentModelVariable }})
    {
        ${{ modelVariable }} = null;
        $referrer = url()->previous();
        $action = route('{{ routeprefix }}.store', ${{ parentModelVariable }});
        return view('{{ viewprefix }}.edit', compact('{{ modelVariable }}', '{{ parentModelVariable }}', 'action', 'referrer'));
    }

    public function store({{ model }}Request $request, {{ parentModel }} ${{ parentModelVariable }})
    {
        try {
            $fields = $request->validated();
            ${{ parentModelVariable }}->{{ pluralModelVariable }}()->create($fields);
        } catch (Exception $e) {
            return redirect()->back()->with('warning', '{{ model }} creation failed. ' . $e->getMessage());
        }

        $referrer = $request->get('_referrer');
        $redirectTo = $referrer ?: route('{{ routeprefix }}.index', ${{ parentModelVariable }});

        return redirect($redirectTo)->with('success', '{{ model }} created successfully');
    }

    public function show({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});

        return view('{{ viewprefix }}.show', compact('{{ modelVariable }}', '{{ parentModelVariable }}'));
    }

    public function edit({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});

        $referrer = url()->previous();
        $action = route('{{ routeprefix }}.store', [${{ parentModelVariable }}, ${{ modelVariable }}]);
        return view('{{ viewprefix }}.edit', compact('{{ modelVariable }}', '{{ parentModelVariable }}', 'action', 'referrer'));
    }

    public function update({{ model }}Request $request, {{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});

        $referrer = $request->get('_referrer');
        $redirectTo = $referrer ?: route('{{ routeprefix }}.index', ${{ parentModelVariable }});

        try {
            $fields = $request->validated();
            ${{ modelVariable }}->update($fields);
        } catch (Exception $e) {
            return redirect($redirectTo)->with('warning', '{{ model }} update failed. ' . $e->getMessage());
        }

        return redirect($redirectTo)->with('success', '{{ model }} updated successfully');
    }

    public function destroy({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});

        try {
            ${{ modelVariable }}->delete();
        } catch (Exception $e) {
            return redirect()->back()->with('error', '{{ model }} deletion failed. ' . $e->getMessage());
        }

        return redirect()->back()->with('success', '{{ model }} deleted successfully');
    }

    private function validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }})
    {
        if (${{ parentModelVariable }}->isNot(${{ modelVariable }}->{{ parentModelVariable }})) abort(404, '{{ model }} does not belong to this {{ parentModel }}');
    }
}
