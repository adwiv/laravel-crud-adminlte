<?php
/** @noinspection PhpMissingReturnTypeInspection */

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ namespacedParentModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ rootNamespace }}Http\Requests\{{ model }}Request;
use {{ rootNamespace }}Http\Resources\{{ model }}Resource;

class {{ class }} extends Controller
{
    public function index({{ parentModel }} ${{ parentModelVariable }})
    {
        ${{ pluralModelVariable }} = ${{ parentModelVariable }}->{{ pluralModelVariable }}()->paginate();
        return {{ model }}Resource::collection(${{ pluralModelVariable }});
    }

    public function store({{ model }}Request $request, {{ parentModel }} ${{ parentModelVariable }})
    {
        $fields = $request->validated();
        $fields['{{ parentModelVariable }}_id'] = ${{ parentModelVariable }}->id;

        ${{ modelVariable }} = {{ model }}::create($fields);
        return new {{ model }}Resource(${{ modelVariable }});
    }

    public function show({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});
        return new {{ model }}Resource(${{ modelVariable }});
    }

    public function update({{ model }}Request $request, {{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});

        $fields = $request->validated();
        ${{ modelVariable }}->update($fields);
        return new {{ model }}Resource(${{ modelVariable }});
    }

    public function destroy({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});
        ${{ modelVariable }}->delete();
    }

    private function validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }})
    {
        if (${{ parentModelVariable }}->isNot(${{ modelVariable }}->{{ parentModelVariable }})) abort(404, '{{ model }} does not belong to this {{ parentModel }}');
    }
}
